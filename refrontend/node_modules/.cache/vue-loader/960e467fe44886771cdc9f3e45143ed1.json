{"remainingRequest":"/usr/src/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/src/app/src/views/Listings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/src/app/src/views/Listings.vue","mtime":1571142500619},{"path":"/usr/src/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport listing from \"../components/Listing.vue\"\nimport dataset from \"@/assets/dataset.json\"\nimport bad_dataset from \"@/assets/datasetbad.json\"\n    export default {\n        name: 'listings',\n        data() {\n            return {\n                last : false,\n                prop_listings : [],\n                order : {},\n                biased: null,\n                pool : dataset,\n                timestamps : [],\n                actions: 0,\n                total: 0\n            }\n        },\n        mounted() {\n            this.biased = ((Math.random() > 0.5) ? true : false)\n            this.prop_listings = this.shuffle(this.pool).slice(0,4);\n            for (let i = 0; i < this.pool.length; i++) {\n                let key = this.pool[i].Name\n                this.order[key] = []\n            }\n            console.log(JSON.stringify(this.order, null, 4))\n            this.total = this.pool.length;\n\n        },\n        methods: {\n            shuffle(array) {\n                for(let i = array.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * i)\n                    const temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n                }\n                return array\n            },\n            choose(prop_listing) {\n                const temp = [];\n                var currentdate = new Date(); \n                var dtString = \"\" + currentdate.getDate() + \"/\"\n                                + (currentdate.getMonth()+1)  + \"/\" \n                                + currentdate.getFullYear() + \" \"  \n                                + currentdate.getHours() + \":\"  \n                                + currentdate.getMinutes() + \":\" \n                                + currentdate.getSeconds();\n                this.timestamps.push(dtString);\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    for (let j = 0; j < this.prop_listings.length; j++) {\n                        // If was chosen or contains the element that was chosen, we want to add all non-chosen elements\n                        // to that ordering.\n                        if (value.includes(prop_listing.Name) || key == prop_listing.Name) {\n                            // Filter the element that was chosen. Filter duplicates.\n                            if(this.prop_listings[j] !== prop_listing && !value.includes(this.prop_listings[j].Name)) {\n                                value.push(this.prop_listings[j].Name);\n                            }\n                        }\n                    }\n                    this.order[key] = value;\n                })\n\n                console.log(this.order)\n                \n                if(this.last) {\n                    const resultSet = {\n                        \"order\" : this.order,\n                        \"timestamps\" : this.timestamps,\n                        \"biased\" : this.biased\n                    }\n                    var ctx = this;\n                    this.axios.post('/api', resultSet)\n                    .then(function(){\n                        ctx.$router.push(\"evaluation\");\n                    })\n                    .catch(function(e){\n                        alert('Something went wrong');\n                        console.log(e);\n                    })\n                } else {\n                    this.prop_listings = this.createListingFromOld();\n                }\n                \n                this.actions += 1\n            },\n            createListingFromOld() {\n                const empty = []\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    if (value.length == 0) {\n                        empty.push(key)\n                    }\n                })\n                if (empty.length <= 1) {\n                    const sorted = this.sortOrder()\n                    this.last = true\n                    return this.createListingsFromPool(sorted.slice(0, 4));\n                } else if (empty.length < 4) {\n                    return this.createListingsFromPool(this.shuffle(empty));\n                } else {\n                    return this.createListingsFromPool(this.shuffle(empty).slice(0,4));\n                }\n            },\n            sortOrder () {\n                let array = []\n                let result = []\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    array.push([key, value.length])\n                })\n                array.sort(function(a, b) {\n                    return b[1] - a[1];\n                });\n                \n                for(let i = 0; i < array.length; i++) {\n                    result.push(array[i][0]);\n                }\n                return result\n            },\n            createListingsFromPool(array) {\n                const listings = []\n                for (let j = 0; j < this.pool.length; j++) {\n                    if (array.includes(this.pool[j].Name)) {\n                        listings.push(this.pool[j]);\n                    }\n                }\n                return listings\n            }\n        },\n        props: {\n        },\n        components: {\n            'listing': listing\n        }\n    }\n",{"version":3,"sources":["Listings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Listings.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <div> \n            <b-alert class=\"alert\" show>  \n                <b-row class=\"text-c\">\n                    <h3 class=\"text-c help-text\">Please choose the listing you find the most trustworthy. ({{actions}} / {{total}})</h3>\n                </b-row>\n                <b-row class=\"\"  v-if=\"biased\">\n                    <b-spinner class=\"spinner-center\" style=\"width: 3rem; height: 3rem;\" label=\"Large Spinner\"></b-spinner>\n                </b-row>\n            </b-alert>\n        </div>\n        <b-row>\n            <b-col class=\"no-padding\">  \n                <b-row class=\"no-r-margin\" if=\"pool\">\n                    <listing class=\"listing col-md-6\" v-for=\"prop_listing in prop_listings\" :prop_listing=\"prop_listing\" :key=\"prop_listing.Name\">\n                    </listing>\n                </b-row>\n            </b-col>\n            <b-col v-if=\"biased\" md=\"2\">\n                <b-row>\n                    <div class=\"addtext\">Advertisement</div>\n                    <b-img fluid :src=\"require('../assets/lock-eye.png')\"></b-img>\n                    <div class=\"add\"></div>\n                </b-row>\n\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\nimport listing from \"../components/Listing.vue\"\nimport dataset from \"@/assets/dataset.json\"\nimport bad_dataset from \"@/assets/datasetbad.json\"\n    export default {\n        name: 'listings',\n        data() {\n            return {\n                last : false,\n                prop_listings : [],\n                order : {},\n                biased: null,\n                pool : dataset,\n                timestamps : [],\n                actions: 0,\n                total: 0\n            }\n        },\n        mounted() {\n            this.biased = ((Math.random() > 0.5) ? true : false)\n            this.prop_listings = this.shuffle(this.pool).slice(0,4);\n            for (let i = 0; i < this.pool.length; i++) {\n                let key = this.pool[i].Name\n                this.order[key] = []\n            }\n            console.log(JSON.stringify(this.order, null, 4))\n            this.total = this.pool.length;\n\n        },\n        methods: {\n            shuffle(array) {\n                for(let i = array.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * i)\n                    const temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n                }\n                return array\n            },\n            choose(prop_listing) {\n                const temp = [];\n                var currentdate = new Date(); \n                var dtString = \"\" + currentdate.getDate() + \"/\"\n                                + (currentdate.getMonth()+1)  + \"/\" \n                                + currentdate.getFullYear() + \" \"  \n                                + currentdate.getHours() + \":\"  \n                                + currentdate.getMinutes() + \":\" \n                                + currentdate.getSeconds();\n                this.timestamps.push(dtString);\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    for (let j = 0; j < this.prop_listings.length; j++) {\n                        // If was chosen or contains the element that was chosen, we want to add all non-chosen elements\n                        // to that ordering.\n                        if (value.includes(prop_listing.Name) || key == prop_listing.Name) {\n                            // Filter the element that was chosen. Filter duplicates.\n                            if(this.prop_listings[j] !== prop_listing && !value.includes(this.prop_listings[j].Name)) {\n                                value.push(this.prop_listings[j].Name);\n                            }\n                        }\n                    }\n                    this.order[key] = value;\n                })\n\n                console.log(this.order)\n                \n                if(this.last) {\n                    const resultSet = {\n                        \"order\" : this.order,\n                        \"timestamps\" : this.timestamps,\n                        \"biased\" : this.biased\n                    }\n                    var ctx = this;\n                    this.axios.post('/api', resultSet)\n                    .then(function(){\n                        ctx.$router.push(\"evaluation\");\n                    })\n                    .catch(function(e){\n                        alert('Something went wrong');\n                        console.log(e);\n                    })\n                } else {\n                    this.prop_listings = this.createListingFromOld();\n                }\n                \n                this.actions += 1\n            },\n            createListingFromOld() {\n                const empty = []\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    if (value.length == 0) {\n                        empty.push(key)\n                    }\n                })\n                if (empty.length <= 1) {\n                    const sorted = this.sortOrder()\n                    this.last = true\n                    return this.createListingsFromPool(sorted.slice(0, 4));\n                } else if (empty.length < 4) {\n                    return this.createListingsFromPool(this.shuffle(empty));\n                } else {\n                    return this.createListingsFromPool(this.shuffle(empty).slice(0,4));\n                }\n            },\n            sortOrder () {\n                let array = []\n                let result = []\n                Object.keys(this.order).forEach(key => {\n                    let value = this.order[key];\n                    array.push([key, value.length])\n                })\n                array.sort(function(a, b) {\n                    return b[1] - a[1];\n                });\n                \n                for(let i = 0; i < array.length; i++) {\n                    result.push(array[i][0]);\n                }\n                return result\n            },\n            createListingsFromPool(array) {\n                const listings = []\n                for (let j = 0; j < this.pool.length; j++) {\n                    if (array.includes(this.pool[j].Name)) {\n                        listings.push(this.pool[j]);\n                    }\n                }\n                return listings\n            }\n        },\n        props: {\n        },\n        components: {\n            'listing': listing\n        }\n    }\n</script>\n\n<style scoped lang=\"scss\">\n    .listing {\n        // height: 45%;\n        // max-height: 45vh;\n        height: 50vh;\n        // overflow: visible;\n    }\n\n    .help-text {\n        text-align: center;\n    }\n\n    .no-r-margin {\n        margin-right: 0;\n    }\n\n    .alert {\n        margin-bottom: 0px !important;\n        text-align: center;\n    }\n\n    .add {\n        background-image: url('../assets/lock-ad.png');\n        background-position: center;\n        background-size: cover;\n        width: 100%;\n        height: 500px;\n    }\n    \n    .addtext {\n        color: #665;\n        text-align: right;\n        display: inline-block;\n        padding-right: 20px;\n    }\n\n    .no-padding {\n        padding-right: 0px;\n    }\n\n    .text-c {\n        text-align: center;\n        width: 100%;\n    }\n\n    .spinner-center {\n        margin: auto;\n    }\n</style>\n"]}]}